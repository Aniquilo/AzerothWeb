<?php
if (!defined('init_engine'))
{	
	header('HTTP/1.0 404 not found');
	exit;
}

class TwoFactorAuthentication
{
    private $key      	= false;
    private $keyLength  = 6;
	private $lastKeyId  = false;
	
	public function __construct()
	{
	}
	
    public function setKeyLength($len)
	{
		$this->keyLength = (int)$len;
	}
    
    public function getKey()
	{
		return $this->key;
    }
    
	/**
	**  Generates random key
	**/	
	public function generateKey()
	{
        $result = '';
    
        for($i = 0; $i < $this->keyLength; $i++) {
            $result .= mt_rand(0, 9);
        }

		return $this->key = (int)$result;			
	}
	
	/**
	**  Registers the key generated by generateKey() into the database
	**/		
	public function registerKey($accountId = 0)
	{
		global $DB, $CORE;
        
        if ($this->key === false)
            $this->generateKey();
        
        $time = $CORE->getTime();

        //insert new key	
        $insert_res = $DB->prepare("INSERT INTO `twofactor_keys` (`account`, `key`, `time`) VALUES (:account, :key, :time);");
        $insert_res->bindParam(':account', $accountId, PDO::PARAM_INT);
        $insert_res->bindParam(':key', $this->key, PDO::PARAM_STR);
        $insert_res->bindParam(':time', $time, PDO::PARAM_STR);
        $insert_res->execute();
        
        if ($insert_res->rowCount() < 1)
            return false;

		unset($insert_res);
		
		return $this->key;
	}
    
    public function emailKey($emailAddress, $key = false)
    {
        global $DB, $CORE, $config;

        if ($key === false)
            $key = $this->key;
        
        $CORE->loadLibrary('phpmailer');

        //setup the PHPMailer class
		$mail = new PHPMailer();
		$mail->IsMail();
        $mail->From = $config['Email'];
        $mail->FromName = $config['SiteName'];
		
        //get the message html
        $message = file_get_contents(ROOTPATH . '/resources/mails/twofactor_code_mail.html');
        
        //break if the function failed to laod HTML
        if (!$message)
        {
            return false;
        }
        
        //replace the tags with info
        $search = array('{CODE}', '{SITE_NAME}', '{IP}');
        $replace = array($key, $config['SiteName'], $CORE->security->getip());
        $message = str_replace($search, $replace, $message);
        
        $mail->AddAddress($emailAddress);
        $mail->Subject = $config['SiteName'] . ' Two-factor Authentication Code';			
        $mail->MsgHTML($message);
        if (!$mail->Send())
        {
            return false;
        }
		
		return true;
    }

	/**
	**  Validate the specified key
	**/	
	public function validateKey($key, $accountId = false, $expires = false)
	{
		global $DB, $CORE;
		
        //The default query should not include the optional stuff
        $query_where = 'WHERE `key` = :key';
        
        //we need to check if we have identifier to search with
        if ($accountId)
            $query_where .= ' AND `account` = :id';
        
        //prepare the query
        $res = $DB->prepare("SELECT * FROM `twofactor_keys` ".$query_where." ORDER BY `time` DESC LIMIT 1;");
        $res->bindParam(':key', $key, PDO::PARAM_STR);
        if ($accountId)
        {
            $res->bindParam(':id', $accountId, PDO::PARAM_INT);
        }
        //run the query
        $res->execute();
        
        //check if the key was found
        if ($res->rowCount() > 0)
        {
            $row = $res->fetch();
            
            //check if the key has expire period
            if ($expires !== false)
            {
                //check the ticket expiration
                //Convert to Time Object
                $expireTime = $CORE->getTime(true, $row['time']);
                $expireTime->modify($expires);
                
                //now check if the time now is greater than the expiration
                if ($CORE->getTime(true) > $expireTime)
                { 
                    return false;
                }
            }
        }
        else
        {
            return false;
        }
		
		$this->lastKeyId = $row['id'];
		
		//if the script ends here that means that the key is valid
		return true;
	}
	
	/**
	**  Destroy key - deletes the record from the database
	**/	
	public function destroyKey($id = false)
	{
		global $DB, $CORE;
		
		if (!$id)
		{
			$id = $this->lastKeyId;
		}
		
		//check if we have key
		if ($id)
		{
			//prepare the query
			$res = $DB->prepare("DELETE FROM `twofactor_keys` WHERE `id` = :id LIMIT 1;");
			$res->bindParam(':id', $id, PDO::PARAM_INT);
			$res->execute();
			
			if ($res->rowCount() > 0)
			{
				if ($id == $this->lastKeyId)
				{
					$this->lastKeyId = false;
				}
				
				return true;
			}
        }
        
        return false;
    }
    
    /**
	**  Destroy all keys by account - deletes the records from the database
	**/	
	public function destroyKeys($accountId)
	{
		global $DB, $CORE;
		
        //prepare the query
        $res = $DB->prepare("DELETE FROM `twofactor_keys` WHERE `account` = :id;");
        $res->bindParam(':id', $accountId, PDO::PARAM_INT);
        $res->execute();
        
        return true;
	}
}